---
author:
- name: Yuxin Fu
  orcid: 0009-0003-0905-0207
- name: Dianyi Yang
  orcid: 0009-0004-4652-3429
title: "研究入门：如何成为现代定量社会科学家？"
subtitle: "Positron、Quarto、Github Copilot和Zotero完全指南"
date: '2025-09-27'
categories:
  - Positron
  - Quarto
  - Github
  - Zotero
  - Copilot
  - 教程
image: featured.jpg
google-scholar: false
links:
  - icon: play-circle
    name: 视频教程
    url: https://www.bilibili.com/video/BV1RBWPzjELj
---

本指南提供了安装、配置和使用Positron、Quarto和Zotero进行定量学术研究论文写作的全面指导。

# 安装

本节将指导您安装和设置Positron、Quarto和Zotero，用于撰写定量学术研究论文。

## 安装R、Positron和Quarto

首先，我们需要下载并安装R、Positron和Quarto。

1. 按照[CRAN镜像](https://mirrors.tuna.tsinghua.edu.cn/CRAN/)上的说明下载并安装R。

2. 按照[Positron下载页面](https://positron.posit.co/download.html)上的说明下载Positron。

3. 运行安装程序并安装Positron。当被要求时，请勾选所有选项。

![勾选所有选项](Positron_Install.png)

4. 按照[Quarto入门指南](https://quarto.org/docs/get-started/)上的说明下载并安装Quarto。

## 设置系统环境变量

接下来，我们需要为代理设置系统环境变量。

**Windows用户：**

1. 打开Windows开始菜单并搜索"Env"。

2. 点击"编辑系统环境变量"。

3. 在系统属性窗口中，点击"环境变量"按钮。

4. 在环境变量窗口中，在"系统变量"部分下，点击"新建"按钮。

5. 在新建系统变量窗口中，输入`HTTP_PROXY`作为变量名，`http://127.0.0.1:xxxx`作为变量值。点击确定。（将`xxxx`替换为您代理使用的端口号。）

6. 重复步骤5，创建另一个名为`HTTPS_PROXY`的系统变量，值相同为`http://127.0.0.1:xxxx`。

7. 重复步骤5，创建另一个名为`NO_PROXY`的系统变量，值为`localhost,127.0.0.1`。

8. 点击确定关闭环境变量窗口。点击确定关闭系统属性窗口。

**Mac用户：**

正在完善中。

## 加入Github教育计划

要使用Github Copilot，我们需要加入Github教育计划。

1. 打开网络浏览器，访问[GitHub Education](https://github.com/education)。

2. 点击"Join GitHub Education"按钮。

3. 按照说明验证您的学生身份并完成申请过程。

## 更新Positron并设置Github Copilot Chat

现在，我们需要更新Positron并设置Github Copilot Chat。

1. 打开Positron。

2. 点击左下角的"管理"图标。

3. 点击"设置"打开设置选项卡。

4. 在设置选项卡中，搜索"channel"，将"releases"切换为"dailies"。

5. 点击左下角的"管理"图标。点击"检查更新"将Positron更新到最新版本。更新完成后，重启Positron。

6. 重复步骤2和3再次打开设置选项卡。

7. 在设置选项卡中，搜索"assistant"。勾选"Enable Positron Assistant"选项。

8. 点击左侧边栏的"聊天"图标打开聊天选项卡。

9. 在聊天选项卡中，点击"添加模型提供商"按钮。

10. 在配置语言模型提供商窗口中，选择"GitHub Copilot"。点击"登录"。

11. 在GitHub登录页面中，输入您的GitHub凭据进行登录。

12. 登录后，您将被重定向回Positron。现在您可以使用GitHub Copilot提供的大语言模型来协助您的编程工作。

## 安装R包管理器

接下来，我们需要安装R包管理器来管理R包。

1. 打开Positron。点击左侧边栏的"扩展"图标。

2. 搜索"Positron R Package Manager"。点击"安装"来安装扩展。

3. 扩展安装并激活后，您可以在左侧边栏找到R包管理器📖图标。

4. 将📖图标拖拽到右侧的辅助边栏中。

## 安装Zotero

最后，我们需要下载并安装Zotero来管理参考文献。

正在完善中。

# 使用方法

本节将指导您如何使用Positron、Quarto和Zotero撰写定量学术研究论文。

## 获取ORCID模板

现在，每次开始撰写新论文前，我们可以安装ORCID模板以获得更好的LaTeX格式。

1. 打开Positron，创建一个qmd文件作为您的文稿。点击底部边栏的"终端"。

2. 在终端中，输入以下命令并按回车："quarto add kv9898/orcid"。

3. 当询问是否信任作者并继续时，输入"Y"。

4. 现在您可以使用ORCID模板工作。从这里复制并粘贴示例语法：[ORCID模板](https://github.com/kv9898/orcid/blob/main/example.qmd)。

5. 点击顶部栏的"预览"尝试编译文档。按照终端中的说明安装任何缺失的包。

## YAML头部

您可以修改默认的YAML头部以满足您的需求。有关更多信息，请参考模板中代码的注释。

正在完善中。

## 回归分析示例

以下是使用ORCID模板和mtcars数据集进行回归分析的示例，展示了撰写定量学术研究论文时的一些基本语法。

首先，让我们使用散点图检查汽车重量与燃油效率之间的关系。

点击顶部栏的"插入代码单元格"按钮插入r代码单元格，并将以下代码复制粘贴到代码单元格中：

```r
# 为散点图分配标签以便交叉引用
# 图表标签应该有前缀"fig-"
#| label: fig-scatter
# 为散点图分配标题
#| fig-cap: "汽车重量与燃油效率的关系"
# 仅对图表输出设置echo、warning和message为false
#| echo: false
#| warning: false
#| message: false
# 安装必要的包
install.packages(c("ggplot2", "dplyr"))
# 如果包已安装，可以跳过上面的行
library(ggplot2)
library(dplyr)
# 创建描述性统计图表
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point(aes(color = factor(cyl)), size = 3) +
  geom_smooth(method = "lm", se = TRUE, color = "blue") +
  labs(
    x = "重量 (1000磅)",
    y = "每加仑英里数",
    color = "气缸数"
  ) +
  theme_minimal()
```
```{r}
#| label: fig-scatter
#| fig-cap: "汽车重量与燃油效率的关系"
#| fig-pos: "H"
#| echo: false
#| warning: false
#| message: false
library(ggplot2)
library(dplyr)

# 创建描述性统计图表
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point(aes(color = factor(cyl)), size = 3) +
  geom_smooth(method = "lm", se = TRUE, color = "blue") +
  labs(
    x = "重量 (1000磅)",
    y = "每加仑英里数",
    color = "气缸数"
  ) +
  theme_minimal()
```

接下来，我们将进行回归分析。用LaTeX语法编写的方程应该用双美元符号`$$ ... $$`括起来，并使用`{#label}`分配标签以便交叉引用。

```r
$$
mpg = \beta_0 + \beta_1 \cdot 重量 + \beta_2 \cdot 气缸数 + \epsilon
$$ {#eq-regression}  #方程标签应该有前缀"eq-"
```
$$
mpg = \beta_0 + \beta_1 \cdot 重量 + \beta_2 \cdot 气缸数 + \epsilon
$$ {#eq-regression}

我们也可以使用"&"来对齐方程。例如，如果我们希望方程在等号处对齐并作为一组引用，我们可以写：

```r
$$
\begin{aligned}
1+2&=3\\
3+4&=7\\
11&=5+6
\end{aligned}
$$ {#eq-group}
```
注意这里我们使用`\begin{aligned} ... \end{aligned}`来对齐一组方程，使用`\\`表示换行，使用`&`表示对齐点。

这三个方程现在作为一组引用并在等号处对齐：

$$
\begin{aligned}
1+2&=3\\
3+4&=7\\
11&=5+6
\end{aligned}
$$ {#eq-group}

最后，让我们创建一个回归表来总结我们的回归结果。我们将使用`modelsummary`包来创建格式良好的回归表。

```r
# 为回归表分配标签以便交叉引用
# 表格标签应该有前缀"tbl-"
#| label: tbl-regression
# 为回归表分配标题
#| tbl-cap: "回归结果：燃油效率模型"
# 仅对图表输出设置echo、warning和message为false
#| echo: false
#| warning: false
#| message: false
library(modelsummary)
# 拟合回归模型
model1 <- lm(mpg ~ wt, data = mtcars)
model2 <- lm(mpg ~ wt + cyl, data = mtcars)
model3 <- lm(mpg ~ wt + cyl + hp, data = mtcars)
# 创建回归表
modelsummary(
  list("模型1" = model1, "模型2" = model2, "模型3" = model3),
  stars = TRUE,
  gof_map = c("nobs", "r.squared", "adj.r.squared")
)
```
```{r}
#| label: tbl-regression
#| tbl-cap: "回归结果：燃油效率模型"
#| tbl-pos: "H"
#| echo: false
#| warning: false
#| message: false
library(modelsummary)

# 拟合回归模型
model1 <- lm(mpg ~ wt, data = mtcars)
model2 <- lm(mpg ~ wt + cyl, data = mtcars)
model3 <- lm(mpg ~ wt + cyl + hp, data = mtcars)

# 创建回归表
modelsummary(
  list("模型1" = model1, "模型2" = model2, "模型3" = model3),
  stars = TRUE,
  gof_map = c("nobs", "r.squared", "adj.r.squared")
)
```

方程、图表和表格会自动按正确顺序编号，并可以在文本中交叉引用。

要在Quarto中创建正确的交叉引用，请使用以下语法：在您想要进行交叉引用的地方使用`@标签`，其中*标签*是您分配给图表、表格或方程的标签。例如，`@eq-regression`引用回归方程@eq-regression，`@eq-group`引用方程组@eq-group，`@fig-scatter`引用散点图@fig-scatter，`@tbl-regression`引用回归表@tbl-regression。您可以参考[Quarto交叉引用文档](https://quarto.org/docs/authoring/cross-references.html#overview)获取更多交叉引用信息。

## 文献综述示例

正在完善中。
